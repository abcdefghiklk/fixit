<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference
  PUBLIC "-//Norman Walsh//DTD JRefEntry V1.1//EN" "http://docbook.sourceforge.net/release/jrefentry/1.1/jrefentry.dtd">
<reference>
<referenceinfo>
<releaseinfo role="meta">
$Id: param.xml,v 1.1 2002/05/15 17:22:25 isberg Exp $
</releaseinfo>
<author><surname>Walsh</surname>
<firstname>Norman</firstname></author>
<copyright><year>1999</year><year>2000</year>
<holder>Norman Walsh</holder>
</copyright>
</referenceinfo>
<title>HTML Parameter Reference</title>

<partintro>
<section><title>Introduction</title>


<para>This is technical reference documentation for the DocBook XSL
Stylesheets; it documents (some of) the parameters, templates, and
other elements of the stylesheets.</para>



<para>This reference describes each of the HTML Stylesheet parameters.
These are the <quote>easily customizable</quote> parts of the stylesheet.
If you want to specify an alternate value for one or more of these
parameters, you can do so in a <quote>driver</quote> stylesheet.</para>



<para>For example, if you want to change the <literal>html.stylesheet</literal>
to <filename>reference.css</filename>, you might create a driver
stylesheet like this:</para>


<programlisting>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version='1.0'&gt;

  &lt;xsl:import href="/path/to/html/docbook.xsl"/&gt;

  &lt;xsl:param name="html.stylesheet"&gt;reference.css&lt;/xsl:param&gt;

&lt;/xsl:stylesheet&gt;</programlisting>


<para>Naturally, you have to change the
<sgmltag class="attribute">href</sgmltag> attribute on
<literal>&lt;xsl:import&gt;</literal>
to point to <filename>docbook.xsl</filename>
on your system. (Or <filename>chunk.xsl</filename>, if you're using
chunking.)</para>



<para>This is not intended to be <quote>user</quote> documentation.
It is provided for developers writing customization layers for the
stylesheets, and for anyone who's interested in <quote>how it
works</quote>.</para>



<para>Although I am trying to be thorough, this documentation is known
to be incomplete. Don't forget to read the source, too :-)</para>

</section>
</partintro>

<refentry id="param.author.othername.in.middle">
<refnamediv>
<refname>author.othername.in.middle</refname>
<refpurpose>Is <sgmltag>othername</sgmltag> in <sgmltag>author</sgmltag> a
middle name?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="author.othername.in.middle" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), the <sgmltag>othername</sgmltag> of an <sgmltag>author</sgmltag>
appears between the <sgmltag>firstname</sgmltag> and
<sgmltag>surname</sgmltag>.  Otherwise, <sgmltag>othername</sgmltag>
is suppressed.
</para>

</refdescription></refentry>

<refentry id="param.html.stylesheet">
<refnamediv>
<refname>html.stylesheet</refname>
<refpurpose>Name of the stylesheet to use in the generated HTML</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="html.stylesheet" select="''" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The name of the stylesheet to place in the HTML <sgmltag>LINK</sgmltag>
tag, or the empty string to suppress the stylesheet <sgmltag>LINK</sgmltag>.
</para>

</refdescription></refentry>

<refentry id="param.html.stylesheet.type">
<refnamediv>
<refname>html.stylesheet.type</refname>
<refpurpose>The type of the stylesheet used in the generated HTML</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="html.stylesheet.type" doc:type="string"&gt;text/css&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The type of the stylesheet to place in the HTML <sgmltag>link</sgmltag> tag.
</para>

</refdescription></refentry>

<refentry id="param.html.base">
<refnamediv>
<refname>html.base</refname>
<refpurpose>An HTML base URI</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="html.base" doc:type="uri"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If html.base is set, it is used for the <sgmltag>BASE</sgmltag>
element in the <sgmltag>HEAD</sgmltag> of the HTML documents.
This is useful for dynamically served HTML where the base URI needs
to be shifted.</para>

</refdescription></refentry>

<refentry id="param.ulink.target">
<refnamediv>
<refname>ulink.target</refname>
<refpurpose>The HTML anchor target for ULinks</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="ulink.target" select="'_top'" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <parameter>ulink.target</parameter> is set, its value will
be used for the <sgmltag class="attribute">target</sgmltag> attribute
on anchors generated for <sgmltag>ulink</sgmltag>s.</para>

</refdescription></refentry>

<refentry id="param.refentry.xref.manvolnum">
<refnamediv>
<refname>refentry.xref.manvolnum</refname>
<refpurpose>Output <sgmltag>manvolnum</sgmltag> as part of 
<sgmltag>refentry</sgmltag> cross-reference?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="refentry.xref.manvolnum" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>if true (non-zero), the <sgmltag>manvolnum</sgmltag> is used when cross-referencing
<sgmltag>refentry</sgmltag>s, either with <sgmltag>xref</sgmltag>
or <sgmltag>citerefentry</sgmltag>.
</para>

</refdescription></refentry>

<refentry id="param.show.comments">
<refnamediv>
<refname>show.comments</refname>
<refpurpose>Display <sgmltag>comment</sgmltag> elements?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="show.comments" doc:type="boolean"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), comments will be displayed, otherwise they are suppressed.
Comments here refers to the <sgmltag>comment</sgmltag> element,
which will be renamed <sgmltag>remark</sgmltag> in DocBook V4.0,
not XML comments (&lt;-- like this --&gt;) which are unavailable.
</para>

</refdescription></refentry>

<refentry id="param.funcsynopsis.style">
<refnamediv>
<refname>funcsynopsis.style</refname>
<refpurpose>What style of 'FuncSynopsis' should be generated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="funcsynopsis.style" doc:type="list" doc:list="ansi kr"&gt;kr&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <varname>funcsynopsis.style</varname> is <literal>ansi</literal>,
ANSI-style function synopses are generated for a
<sgmltag>funcsynopsis</sgmltag>, otherwise K&amp;R-style
function synopses are generated.
</para>

</refdescription></refentry>

<refentry id="param.funcsynopsis.decoration">
<refnamediv>
<refname>funcsynopsis.decoration</refname>
<refpurpose>Decorate elements of a FuncSynopsis?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="funcsynopsis.decoration" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), elements of the FuncSynopsis will be decorated (e.g. bold or
italic).  The decoration is controlled by functions that can be redefined
in a customization layer.
</para>

</refdescription></refentry>

<refentry id="param.function.parens">
<refnamediv>
<refname>function.parens</refname>
<refpurpose>Generate parens after a function?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="function.parens" doc:type="boolean"&gt;0&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If not 0, the formatting of
a <sgmltag class="starttag">function</sgmltag> element will include
generated parenthesis.
</para>

</refdescription></refentry>

<refentry id="param.refentry.generate.name">
<refnamediv>
<refname>refentry.generate.name</refname>
<refpurpose>Output NAME header before 'RefName'(s)?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="refentry.generate.name" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), a "NAME" section title is output before the list
of 'RefName's.
</para>

</refdescription></refentry>

<refentry id="param.admon.graphics">
<refnamediv>
<refname>admon.graphics</refname>
<refpurpose>Use graphics in admonitions?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="admon.graphics" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), admonitions are presented in an alternate style that uses
a graphic.  Default graphics are provided in the distribution.
</para>

</refdescription></refentry>

<refentry id="param.admon.graphics.path">
<refnamediv>
<refname>admon.graphics.path</refname>
<refpurpose>Path to admonition graphics</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="admon.graphics.path" doc:type="string"&gt;images/&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Sets the path, probably relative to the directory where the HTML
files are created, to the admonition graphics.
</para>

</refdescription></refentry>

<refentry id="param.admon.graphics.extension">
<refnamediv>
<refname>admon.graphics.extension</refname>
<refpurpose>Extension for admonition graphics</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="admon.graphics.extension" select="'.png'" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Sets the extension to use on admonition graphics.</para>

</refdescription></refentry>

<refentry id="param.admon.style">
<refnamediv>
<refname>admon.style</refname>
<refpurpose>CSS style attributes for admonitions</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="admon.style" doc:type="string"&gt;
  &lt;xsl:text&gt;margin-left: 0.5in; margin-right: 0.5in;&lt;/xsl:text&gt;
&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Specifies the value of the <sgmltag class="attribute">STYLE</sgmltag>
attribute that should be added to admonitions.
</para>

</refdescription></refentry>

<refentry id="param.section.autolabel">
<refnamediv>
<refname>section.autolabel</refname>
<refpurpose>Are sections enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="section.autolabel" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled sections will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.section.label.includes.component.label">
<refnamediv>
<refname>section.label.includes.component.label</refname>
<refpurpose>Do section labels include the component label?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="section.label.includes.component.label" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), section labels are prefixed with the label of the
component that contains them.
</para>

</refdescription></refentry>

<refentry id="param.chapter.autolabel">
<refnamediv>
<refname>chapter.autolabel</refname>
<refpurpose>Are chapters and appendixes enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="chapter.autolabel" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled chapters and appendixes will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.preface.autolabel">
<refnamediv>
<refname>preface.autolabel</refname>
<refpurpose>Are prefaces enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="preface.autolabel" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled prefaces will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.part.autolabel">
<refnamediv>
<refname>part.autolabel</refname>
<refpurpose>Are parts and references enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="part.autolabel" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled parts and references will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.qandadiv.autolabel">
<refnamediv>
<refname>qandadiv.autolabel</refname>
<refpurpose>Are divisions in QAndASets enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="qandadiv.autolabel" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled qandadivs will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.qanda.inherit.numeration">
<refnamediv>
<refname>qanda.inherit.numeration</refname>
<refpurpose>Does enumeration of QandASet components inherit the numeration of parent elements?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="qanda.inherit.numeration" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), numbered QandADiv elements and Questions and Answers inherit
the numeration of the ancestors of the QandASet.
</para>

</refdescription></refentry>

<refentry id="param.qanda.defaultlabel">
<refnamediv>
<refname>qanda.defaultlabel</refname>
<refpurpose>Sets the default for defaultlabel on QandASet.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="qanda.defaultlabel" doc:type="boolean" doc:list="qanda number none"&gt;number&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If no defaultlabel attribute is specified on a QandASet, this
value is used. It must be one of the legal values for the defaultlabel
attribute.
</para>

</refdescription></refentry>

<refentry id="param.generate.qandaset.toc">
<refnamediv>
<refname>generate.qandaset.toc</refname>
<refpurpose>Is a Table of Contents created for QandASets?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.qandaset.toc" doc:type="boolean"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), a ToC is constructed for QandASets.
</para>

</refdescription></refentry>

<refentry id="param.generate.qandadiv.toc">
<refnamediv>
<refname>generate.qandadiv.toc</refname>
<refpurpose>Is a Table of Contents created for QandADivs?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.qandadiv.toc" doc:type="boolean"&gt;0&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), a ToC is constructed for QandADivs.
</para>

</refdescription></refentry>

<refentry id="param.biblioentry.item.separator">
<refnamediv>
<refname>biblioentry.item.separator</refname>
<refpurpose>Text to separate bibliography entries</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="biblioentry.item.separator" doc:type="string"&gt;. &lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Text to separate bibliography entries
</para>

</refdescription></refentry>

<refentry id="param.toc.section.depth">
<refnamediv>
<refname>toc.section.depth</refname>
<refpurpose>How deep should recursive <sgmltag>section</sgmltag>s appear
in the TOC?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="toc.section.depth" doc:type="integer" doc:min="1" doc:max="10"&gt;2&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Specifies the depth to which recursive sections should appear in the
TOC.
</para>

</refdescription></refentry>

<refentry id="param.using.chunker">
<refnamediv>
<refname>using.chunker</refname>
<refpurpose>Will the output be chunked?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="using.chunker" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>In addition to providing chunking, the chunker can cleanup a
number of XML to HTML issues. If the chunker is not being used, the
stylesheets try to avoid producing results that will not appear properly
in browsers.
</para>

</refdescription></refentry>

<refentry id="param.generate.component.toc">
<refnamediv>
<refname>generate.component.toc</refname>
<refpurpose>Should TOCs be genereated in components (Chapters, Appendixes, etc.)?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.component.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), they are.
</para>

</refdescription></refentry>

<refentry id="param.generate.division.toc">
<refnamediv>
<refname>generate.division.toc</refname>
<refpurpose>Should TOCs be genereated in divisions (Books, Parts, etc.)?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.division.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), they are.
</para>

</refdescription></refentry>

<refentry id="param.link.mailto.url">
<refnamediv>
<refname>link.mailto.url</refname>
<refpurpose>Mailto URL for the LINK REL=made HTML HEAD element</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="link.mailto.url" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If not the empty string, this address will be used for the
REL=made <sgmltag>LINK</sgmltag> element in the HTML <sgmltag>HEAD</sgmltag>.
</para>

</refdescription></refentry>

<refentry id="param.graphic.default.extension">
<refnamediv>
<refname>graphic.default.extension</refname>
<refpurpose>Default extension for graphic filenames</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="graphic.default.extension" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If a <sgmltag>graphic</sgmltag> or <sgmltag>mediaobject</sgmltag>
includes a reference to a filename that does not include an extension,
and the <sgmltag class="attribute">format</sgmltag> attribute is
<emphasis>unspecified</emphasis>, the default extension will be used.
</para>

</refdescription></refentry>

<refentry id="param.toc.list.type">
<refnamediv>
<refname>toc.list.type</refname>
<refpurpose>Type of HTML list element to use for Tables of Contents</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="toc.list.type" doc:type="list" doc:list="dl ul ol"&gt;dl&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>When an automatically generated Table of Contents (or List of Titles)
is produced, this HTML element will be used to make the list.
</para>

</refdescription></refentry>

<refentry id="param.use.id.function">
<refnamediv>
<refname>use.id.function</refname>
<refpurpose>Use the XPath id() function to find link targets?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="use.id.function" doc:type="boolean" select="'1'"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If 1, the stylesheets use the <function>id()</function> function
to find the targets of cross reference elements. This is more
efficient, but only works if your XSLT processor implements the
<function>id()</function> function, naturally.</para>


<para>THIS PARAMETER IS NOT SUPPORTED. IT IS ALWAYS ASSUMED TO BE 1.
SEE xref.xsl IF YOU NEED TO TURN IT OFF.</para>

</refdescription></refentry>

<refentry id="param.spacing.paras">
<refnamediv>
<refname>spacing.paras</refname>
<refpurpose>Insert additional &lt;p&gt; elements for spacing?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="spacing.paras" doc:type="boolean" select="'0'"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>When non-zero, additional, empty paragraphs are inserted in
several contexts (for example, around informal figures), to create a
more pleasing visual appearance in many browsers.
</para>

</refdescription></refentry>

<refentry id="param.css.decoration">
<refnamediv>
<refname>css.decoration</refname>
<refpurpose>Enable CSS decoration of elements</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="css.decoration" doc:type="boolean"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>
If <literal>css.decoration</literal> is turned on, then HTML elements
produced by the
stylesheet may be decorated with STYLE attributes.  For example, the
LI tags produced for list items may include a fragment of CSS in the
STYLE attribute which sets the CSS property "list-style-type".
</para>

</refdescription></refentry>

<refentry id="param.show.revisionflag">
<refnamediv>
<refname>show.revisionflag</refname>
<refpurpose>Enable decoration of elements that have a revisionflag</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="show.revisionflag" doc:type="boolean"&gt;0&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>
If <literal>show.revisionflag</literal> is turned on, then the stylesheets
may produce additional markup designed to allow a CSS stylesheet to
highlight elements that have specific revisionflag settings.</para>



<para>The markup inserted will be usually be either a &lt;span&gt; or &lt;div&gt;
with an appropriate <literal>class</literal> attribute. (The value of
the class attribute will be the same as the value of the revisionflag
attribute). In some contexts, for example tables, where extra markup
would be structurally illegal, the class attribute will be added to the
appropriate container element.</para>



<para>In general, the stylesheets only test for revisionflag in contexts
where an importing stylesheet would have to redefine whole templates.
Most of the revisionflag processing is expected to be done by another
stylesheet, for example <filename>changebars.xsl</filename>.</para>

</refdescription></refentry>

<refentry id="param.suppress.navigation">
<refnamediv>
<refname>suppress.navigation</refname>
<refpurpose>Disable header and footer navigation</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="suppress.navigation" doc:type="boolean"&gt;0&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>
If <literal>suppress.navigation</literal> is turned on, header and
footer navigation will be suppressed.</para>

</refdescription></refentry>

<refentry id="param.rootid">
<refnamediv>
<refname>rootid</refname>
<refpurpose>Specify the root element to format</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="rootid" select="''" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <parameter>rootid</parameter> is specified, it must be the
value of an ID that occurs in the document being formatted. The entire
document will be loaded and parsed, but formatting will begin at the
element identified, rather than at the root. For example, this allows
you to process only chapter 4 of a book.</para>


<para>Because the entire document is available to the processor, automatic
numbering, cross references, and other dependencies are correctly
resolved.</para>

</refdescription></refentry>

<refentry id="param.callout.list.table">
<refnamediv>
<refname>callout.list.table</refname>
<refpurpose>Present callout lists using a table?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.list.table" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The default presentation of <sgmltag>CalloutList</sgmltag>s uses
an HTML <sgmltag>DL</sgmltag>. Some browsers don't align DLs very well
if <parameter>callout.graphics</parameter> are used. With this option
turned on, <sgmltag>CalloutList</sgmltag>s are presented in an HTML
<sgmltag>TABLE</sgmltag>, which usually results in better alignment
of the callout number with the callout description.</para>

</refdescription></refentry>

<refentry id="param.callout.graphics">
<refnamediv>
<refname>callout.graphics</refname>
<refpurpose>Use graphics for callouts?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.graphics" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If non-zero, callouts are presented with graphics (e.g., reverse-video
circled numbers instead of "(1)", "(2)", etc.).
Default graphics are provided in the distribution.
</para>

</refdescription></refentry>

<refentry id="param.callout.graphics.extension">
<refnamediv>
<refname>callout.graphics.extension</refname>
<refpurpose>Extension for callout graphics</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.graphics.extension" select="'.png'" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Sets the extension to use on callout graphics.</para>

</refdescription></refentry>

<refentry id="param.callout.graphics.path">
<refnamediv>
<refname>callout.graphics.path</refname>
<refpurpose>Path to callout graphics</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.graphics.path" select="'images/callouts/'" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Sets the path, probably relative to the directory where the HTML
files are created, to the callout graphics.
</para>

</refdescription></refentry>

<refentry id="param.callout.graphics.number.limit">
<refnamediv>
<refname>callout.graphics.number.limit</refname>
<refpurpose>Number of the largest callout graphic</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.graphics.number.limit" select="'10'" doc:type="integer"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <parameter>callout.graphics</parameter>
is non-zero, graphics are used to represent
callout numbers. The value of
<parameter>callout.graphics.number.limit</parameter>
is
the largest number for which a graphic exists. If the callout number
exceeds this limit, the default presentation "(nnn)" will always
be used.
</para>

</refdescription></refentry>

<refentry id="param.use.extensions">
<refnamediv>
<refname>use.extensions</refname>
<refpurpose>Enable extensions</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="use.extensions" select="'0'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If non-zero, extensions may be used. Each extension is
further controlled by its own parameter. But if
<parameter>use.extensions</parameter> is zero, no extensions will
be used.
</para>

</refdescription></refentry>

<refentry id="param.textinsert.extension">
<refnamediv>
<refname>textinsert.extension</refname>
<refpurpose>Enable the textinsert extension element</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="textinsert.extension" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The textinsert extension element inserts the contents of a
a file into the result tree (as text).
</para>

</refdescription></refentry>

<refentry id="param.saxon.linenumbering">
<refnamediv>
<refname>saxon.linenumbering</refname>
<refpurpose>Enable the line numbering extension</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="saxon.linenumbering" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true, verbatim environments (elements that have the
format='linespecific' notation attribute: address, literallayout,
programlisting, screen, synopsis) that specify line numbering will
have, surprise, line numbers.
</para>

</refdescription></refentry>

<refentry id="param.linenumbering.extension">
<refnamediv>
<refname>linenumbering.extension</refname>
<refpurpose>Enable the line numbering extension</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="linenumbering.extension" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true, verbatim environments (elements that have the
format='linespecific' notation attribute: address, literallayout,
programlisting, screen, synopsis) that specify line numbering will
have, surprise, line numbers.
</para>

</refdescription></refentry>

<refentry id="param.linenumbering.everyNth">
<refnamediv>
<refname>linenumbering.everyNth</refname>
<refpurpose>Indicate which lines should be numbered</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="linenumbering.everyNth" select="'5'" doc:type="integer"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If line numbering is enabled, everyNth line will be numbered.
</para>

</refdescription></refentry>

<refentry id="param.linenumbering.width">
<refnamediv>
<refname>linenumbering.width</refname>
<refpurpose>Indicates the width of line numbers</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="linenumbering.width" select="'3'" doc:type="integer"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If line numbering is enabled, line numbers will appear right
justified in a field "width" characters wide.
</para>

</refdescription></refentry>

<refentry id="param.linenumbering.separator">
<refnamediv>
<refname>linenumbering.separator</refname>
<refpurpose>Specify a separator between line numbers and lines</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="linenumbering.separator" select="' '" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The separator is inserted between line numbers and lines in
the verbatim environment.
</para>

</refdescription></refentry>

<refentry id="param.saxon.callouts">
<refnamediv>
<refname>saxon.callouts</refname>
<refpurpose>Enable the callout extension</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="saxon.callouts" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The callouts extension processes <sgmltag>areaset</sgmltag>
elements in <sgmltag>ProgramListingCO</sgmltag> and other text-based
callout elements.
</para>

</refdescription></refentry>

<refentry id="param.callouts.extension">
<refnamediv>
<refname>callouts.extension</refname>
<refpurpose>Enable the callout extension</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callouts.extension" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The callouts extension processes <sgmltag>areaset</sgmltag>
elements in <sgmltag>ProgramListingCO</sgmltag> and other text-based
callout elements.
</para>

</refdescription></refentry>

<refentry id="param.callout.defaultcolumn">
<refnamediv>
<refname>callout.defaultcolumn</refname>
<refpurpose>Indicates what column callouts appear in by default</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.defaultcolumn" select="'60'" doc:type="integer"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If a callout does not identify a column (for example, if it uses
the <literal>linerange</literal> <sgmltag class="attribute">unit</sgmltag>),
it will appear in the default column.
</para>

</refdescription></refentry>

<refentry id="param.stylesheet.result.type">
<refnamediv>
<refname>stylesheet.result.type</refname>
<refpurpose>Identifies the output format of this stylesheet</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="stylesheet.result.type" select="'html'" doc:type="list" doc:list="html fo"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The Saxon extension functions need to know if the output format
is HTML ('html') or XSL Formatting Objects ('fo'). This variable answers
that question. Valid settings are 'html' or 'fo'.</para>

</refdescription></refentry>

<refentry id="param.nominal.table.width">
<refnamediv>
<refname>nominal.table.width</refname>
<refpurpose>The (absolute) nominal width of tables</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="nominal.table.width" select="'6in'" doc:type="length"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>In order to convert CALS column widths into HTML column widths, it
is sometimes necessary to have an absolute table width to use for conversion
of mixed absolute and relative widths. This value must be an absolute
length (not a percentag).</para>

</refdescription></refentry>

<refentry id="param.default.table.width">
<refnamediv>
<refname>default.table.width</refname>
<refpurpose>The default width of tables</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="default.table.width" select="''" doc:type="length"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If specified, this value will be used for the WIDTH attribute on
tables that do not specify an alternate width (with the dbhtml processing
instruction).</para>

</refdescription></refentry>

<refentry id="param.saxon.tablecolumns">
<refnamediv>
<refname>saxon.tablecolumns</refname>
<refpurpose>Enable the table columns extension function</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="saxon.tablecolumns" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The table columns extension function adjusts the widths of table
columns in the HTML result to more accurately reflect the specifications
in the CALS table.
</para>

</refdescription></refentry>

<refentry id="param.tablecolumns.extension">
<refnamediv>
<refname>tablecolumns.extension</refname>
<refpurpose>Enable the table columns extension function</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="tablecolumns.extension" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The table columns extension function adjusts the widths of table
columns in the HTML result to more accurately reflect the specifications
in the CALS table.
</para>

</refdescription></refentry>

<refentry id="param.generate.set.toc">
<refnamediv>
<refname>generate.set.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.set.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.generate.book.toc">
<refnamediv>
<refname>generate.book.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.book.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.generate.part.toc">
<refnamediv>
<refname>generate.part.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.part.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.generate.reference.toc">
<refnamediv>
<refname>generate.reference.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.reference.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.generate.preface.toc">
<refnamediv>
<refname>generate.preface.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.preface.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.generate.chapter.toc">
<refnamediv>
<refname>generate.chapter.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.chapter.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.generate.appendix.toc">
<refnamediv>
<refname>generate.appendix.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.appendix.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.generate.article.toc">
<refnamediv>
<refname>generate.article.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.article.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.generate.section.toc">
<refnamediv>
<refname>generate.section.toc</refname>
<refpurpose>Generate TOCs inside Sections?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.section.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If non-zero, a Table of Contents will be generated inside section
elements. Note that
<parameter>generate.section.toc.level</parameter>
may suppress some section TOCs.
</para>

</refdescription></refentry>

<refentry id="param.generate.section.toc.level">
<refnamediv>
<refname>generate.section.toc.level</refname>
<refpurpose>Control depth of TOC generation in sections</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.section.toc.level" select="0" doc:type="integer"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The <parameter>generate.section.toc.level</parameter> parameter
controls the depth of section in which TOCs will be generated. Note
that this is related to, but not the same as
<parameter>toc.section.depth</parameter>, which controls the depth to
which TOC entries will be generated in a given TOC.</para>


<para>If, for example, <parameter>generate.section.toc.level</parameter>
is <literal>3</literal>, TOCs will be generated in first, second, and third
level sections, but not in fourth level sections.
</para>

</refdescription></refentry>

<refentry id="param.process.source.toc">
<refnamediv>
<refname>process.source.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="process.source.toc" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.process.empty.source.toc">
<refnamediv>
<refname>process.empty.source.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="process.empty.source.toc" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.bridgehead.in.toc">
<refnamediv>
<refname>bridgehead.in.toc</refname>
<refpurpose>Should bridgehead elements appear in the TOC?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="bridgehead.in.toc" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If non-zero, bridgeheads appear in the TOC. Note that this option
is not fully supported and may be removed in a future version of the
stylesheets.
</para>

</refdescription></refentry>

<refentry id="param.generate.index">
<refnamediv>
<refname>generate.index</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.index" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.callout.unicode">
<refnamediv>
<refname>callout.unicode</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.unicode" select="0" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.callout.unicode.start.character">
<refnamediv>
<refname>callout.unicode.start.character</refname>
<refpurpose>First Unicode character to use, decimal value.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.unicode.start.character" select="10102" doc:type="integer"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <parameter>callout.graphics</parameter>
is non-zero, graphics are used to represent
callout numbers. The value of
<parameter>callout.graphics.number.limit</parameter>
is
the largest number for which a graphic exists. If the callout number
exceeds this limit, the default presentation "(nnn)" will always
be used.
</para>

</refdescription></refentry>

<refentry id="param.callout.unicode.number.limit">
<refnamediv>
<refname>callout.unicode.number.limit</refname>
<refpurpose>Number of the largest callout graphic</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.unicode.number.limit" select="'10'" doc:type="integer"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <parameter>callout.graphics</parameter>
is non-zero, graphics are used to represent
callout numbers. The value of
<parameter>callout.graphics.number.limit</parameter>
is
the largest number for which a graphic exists. If the callout number
exceeds this limit, the default presentation "(nnn)" will always
be used.
</para>

</refdescription></refentry>

<refentry id="param.callout.unicode.font">
<refnamediv>
<refname>callout.unicode.font</refname>
<refpurpose>Font to use for Unicode dingbats</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="callout.unicode.font" select="'ZapfDingbats'"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The name of the font to specify around Unicode callout glyphs.
If set to the empty string, no font change will occur.
</para>

</refdescription></refentry>

<refentry id="param.use.id.as.filename">
<refnamediv>
<refname>use.id.as.filename</refname>
<refpurpose>Use ID value of chunk elements as the filename?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="use.id.as.filename" select="'0'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <parameter>use.id.as.filename</parameter>
is non-zero, the filename of chunk elements that have IDs will be
derived from the ID value.
</para>

</refdescription></refentry>

<refentry id="param.inherit.keywords">
<refnamediv>
<refname>inherit.keywords</refname>
<refpurpose>Inherit keywords from ancestor elements?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="inherit.keywords" select="'1'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <parameter>inherit.keywords</parameter>
is non-zero, the keyword <sgmltag>META</sgmltag> for each HTML
<sgmltag>HEAD</sgmltag> element will include all of the keywords from
ancestral elements. Otherwise, only the keywords from the current section
will be used.
</para>

</refdescription></refentry>

<refentry id="param.label.from.part">
<refnamediv>
<refname>label.from.part</refname>
<refpurpose>Renumber chapters in each part?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="label.from.part" select="'0'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <parameter>label.from.part</parameter> is non-zero, components
(<sgmltag>chapter</sgmltag>s, <sgmltag>appendixe</sgmltag>s, etc.)
will be numbered from 1 in each <sgmltag>part</sgmltag>. Otherwise,
they will be numbered monotonically throughout each
<sgmltag>book</sgmltag>.
</para>

</refdescription></refentry>

<refentry id="param.citerefentry.link">
<refnamediv>
<refname>citerefentry.link</refname>
<refpurpose>Generate URL links when cross-referencing RefEntrys?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="citerefentry.link" select="'0'" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true, a web link will be generated, presumably
to an online man-&gt;HTML gateway. The text of the link is
generated by the generate.citerefentry.link template.
</para>

</refdescription></refentry>

<refentry id="param.formal.procedures">
<refnamediv>
<refname>formal.procedures</refname>
<refpurpose>Selects formal or informal procedures</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="formal.procedures" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Formal procedures are numbered and always hav a title.
</para>

</refdescription></refentry>

<refentry id="param.bibliography.collection">
<refnamediv>
<refname>bibliography.collection</refname>
<refpurpose>Name of the bibliography collection file</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="bibliography.collection" doc:type="string" select="'http://docbook.sourceforge.net/release/bibliography/bibliography.xml'"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Tired of copying bibliography entries from one document to another?
Now you can maintain a central bibliography and let the stylesheets do
the copying for you. This parameter identifies the file (by URI reference)
that contains your complete bibliography collection.
</para>

</refdescription></refentry>

<refentry id="param.annotate.toc">
<refnamediv>
<refname>annotate.toc</refname>
<refpurpose>Annotate the Table of Contents?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="annotate.toc" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true, TOCs will be annotated. At present, this just means
that the <sgmltag>RefPurpose</sgmltag> of <sgmltag>RefEntry</sgmltag>
TOC entries will be displayed.
</para>

</refdescription></refentry>

<refentry id="param.emphasis.propagates.style">
<refnamediv>
<refname>emphasis.propagates.style</refname>
<refpurpose>Pass emphasis role attribute through to HTML?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="emphasis.propagates.style" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true, the role attribute of <sgmltag>emphasis</sgmltag> elements
will be passed through to the HTML as a class attribute on a
<sgmltag>span</sgmltag> that surrounds the emphasis.</para>

</refdescription></refentry>

<refentry id="param.phrase.propagates.style">
<refnamediv>
<refname>phrase.propagates.style</refname>
<refpurpose>Pass phrase role attribute through to HTML?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="phrase.propagates.style" select="1" doc:type="boolean"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true, the role attribute of <sgmltag>phrase</sgmltag> elements
will be passed through to the HTML as a class attribute on a
<sgmltag>span</sgmltag> that surrounds the phrase.</para>

</refdescription></refentry>

<refentry id="param.runinhead.title.end.punct">
<refnamediv>
<refname>runinhead.title.end.punct</refname>
<refpurpose>Characters that count as punctuation on a run-in-head</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="runinhead.title.end.punct" select="'.!?:'" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>

<refentry id="param.runinhead.default.title.end.punct">
<refnamediv>
<refname>runinhead.default.title.end.punct</refname>
<refpurpose>Default punctuation character on a run-in-head</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="runinhead.default.title.end.punct" select="'.'" doc:type="string"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>FIXME:
</para>

</refdescription></refentry>
</reference>
