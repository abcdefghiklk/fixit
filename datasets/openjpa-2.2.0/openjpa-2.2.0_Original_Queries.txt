1 OPENJPA-2255
Couldn&apos t load the referencedColumn definition when create the JoinTable The JoinColumn couldn&amp #39 t have the referencedColumn&amp #39 s definition which includes the length definition. and it&amp #39 s length  should be assigned to the default value 255.  &lt br/&gt  &lt br/&gt  &lt br/&gt @Entity  &lt br/&gt public class Student {  &lt br/&gt &amp nbsp &amp nbsp @Id @Column(name=&amp quot id&amp quot , length=128, nullable=false) private String id   &lt br/&gt &amp nbsp &amp nbsp @Column(name=&amp quot sName&amp quot , length=255) private String sName   &lt br/&gt &amp nbsp &amp nbsp @ManyToMany  &lt br/&gt &amp nbsp &amp nbsp @JoinTable(  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp name=&amp quot student_course_map&amp quot ,  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp joinColumns={@JoinColumn(name=&amp quot student_id&amp quot , referencedColumnName=&amp quot id&amp quot , nullable=false)},  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp inverseJoinColumns={@JoinColumn(name=&amp quot course_id&amp quot , referencedColumnName=&amp quot id&amp quot , nullable=false)}  &lt br/&gt &amp nbsp &amp nbsp )  &lt br/&gt &amp nbsp &amp nbsp public Collection getCourses()  &lt br/&gt  &lt br/&gt &amp nbsp &amp nbsp ...  &lt br/&gt }  &lt br/&gt  &lt br/&gt @Entity  &lt br/&gt public class Courses{  &lt br/&gt &amp nbsp &amp nbsp @Id @Column(name=&amp quot id&amp quot , length=128, nullable=false) private String id   &lt br/&gt &amp nbsp &amp nbsp @Column(name=&amp quot cName&amp quot , length=255) private String cName   &lt br/&gt  &lt br/&gt &amp nbsp &amp nbsp ...  &lt br/&gt }  &lt br/&gt  &lt br/&gt We can see the student id length has been defined to 128. And there is no definition length in the JoinColumn student_id. The JoinColumn should be set to the default value 255.  &lt br/&gt  &lt br/&gt The warning message will occur like this  &lt br/&gt  &lt br/&gt WARN  [Schema] Existing column &amp quot student_id&amp quot  on table &amp quot test.student_course_map&amp quot  is incompatible with the same column in the given schema definition. Existing column:  &lt br/&gt Full Name: student_course_map.student_id  &lt br/&gt Type: varchar  &lt br/&gt Size: 128  &lt br/&gt Default: null  &lt br/&gt Not Null: true  &lt br/&gt Given column:  &lt br/&gt Full Name: student_course_map.student_id  &lt br/&gt Type: varchar  &lt br/&gt Size: 255  &lt br/&gt Default: null  &lt br/&gt Not Null: true
1
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.meta.MappingInfo

2 OPENJPA-2229
Persistence entities not recognized when deploying on JBoss AS 7.1 I&amp #39 ve found this guide [1] about using OenJPA 2.2.0 and JBoss 7.1: I had some minor issues (already reported on that page) easily solved, but then I came to this exception, thrown at every JPA query: &lt br/&gt  &lt br/&gt &amp lt openjpa-2.2.0-r422266:1244990 nonfatal user error&amp gt  org.apache.openjpa.persistence.ArgumentException: An error occurred while parsing the query filter &amp quot SELECT e FROM  ExternalResource e&amp quot . Error message: The name &amp quot ExternalResource&amp quot  is not a recognized entity or identifier. Perhaps you meant ExternalResource, which is a close match. Known entity names: [ExternalResource, AbstractSchema, RAttrUniqueValue, AbstractVirAttr, Membership, TaskExec, SyncopeConf, Report, RAttr, AbstractExec, SyncopeLogger, USchema, MAttr, PasswordPolicy, RSchema, MSchema, MAttrValue, MAttrUniqueValue, AbstractAttr, AbstractDerSchema, AbstractVirSchema, UAttr, AccountPolicy, RAttrValue, UAttrValue, ReportExec, SyncopeUser, Notification, ConnInstance, AbstractDerAttr, AbstractAttrValue, SyncopeRole, SyncPolicy, Policy, ReportletConfInstance, Task, UAttrUniqueValue, Entitlement, SchemaMapping, UserRequest] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.exps.AbstractExpressionBuilder.parseException(AbstractExpressionBuilder.java:119) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getClassMetaData(JPQLExpressionBuilder.java:194) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.resolveClassMetaData(JPQLExpressionBuilder.java:167) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:242) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:212) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateType(JPQLExpressionBuilder.java:205) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.access$200(JPQLExpressionBuilder.java:80) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder$ParsedJPQL.populate(JPQLExpressionBuilder.java:2417) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.jpql.JPQLParser.populate(JPQLParser.java:61) [openjpa-kernel-2.2.0.jar:2.2.0] &lt br/&gt  &lt br/&gt  &lt br/&gt After some deeper investigation, I&amp #39 ve found that the problem resides in the vfs: JBoss URLs, currently not managed. &lt br/&gt  &lt br/&gt [1] &lt a href=&quot https://community.jboss.org/thread/201329&quot &gt https://community.jboss.org/thread/201329&lt /a&gt
1
openjpa-kernel.src.main.java.org.apache.openjpa.meta.AbstractCFMetaDataFactory

3 OPENJPA-2197
MethodComparator in AnnotationPersistenceMetaDataParser should also compare parameters AnnotationPersistenceMetaDataParser contains a MethodComparator which only compares the class + the method name. Too bad I have (had...) 2 methods with the same name in my EntityListener: &lt br/&gt  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp @PreUpdate &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp public void updateChangeLog(Object entity) { .. &lt br/&gt  &lt br/&gt and also &lt br/&gt  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp private void updateChangeLog(BaseEntity he, ChangeLogEntry cle) &lt br/&gt  &lt br/&gt which is a private helper method. &lt br/&gt  &lt br/&gt Due to the bug in MethodComparator, my @PreUpdate sometimes didn&amp #39 t get detected.
1
openjpa-persistence-jdbc.src.test.java.org.apache.openjpa.persistence.callbacks.ListenerImpl

4 OPENJPA-2131
Missing IN or OUT parameter exception with OracleDictionary We have generate query with  &lt br/&gt  &lt br/&gt Query q = em.createQuery(&amp quot select e._name, e._id, sum(case when e._status=:pending then e._count else 0 end) from Exceptions e, Historty h where e._guid = :guid and ..... &lt br/&gt then set paramenters for both :pending (in select) and :guid (in where), and call q.setMaxResults(100)  &lt br/&gt  &lt br/&gt with DB2, everything works fine, and DBDictionary.getSelects() and SQLBuffer.append() will invoke correctly and set parameter of :pending &lt br/&gt  &lt br/&gt with Oracle implementation, OracleDictionary.getSelects(Select sel, boolean distinctIdentifiers, boolean forUpdate) will invoke and SQLBuffer.getSQL() get to call (as two if checks are not satisfied and gos to create a new SQLBuffer instance), but this time :pending parameter will missing to add to _param List, &lt br/&gt Eventually, we&amp #39 ll get Missing IN or OUT parameter exception from to execute query by preparedStatement  &lt br/&gt  &lt br/&gt This bug exist in both this branch and trunk. &lt br/&gt We have a work around, after SQLBuffer.getSQL() call, add some code to reset _param list.
2
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.sql.OracleDictionary
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.sql.SQLBuffer

5 OPENJPA-428
Bad error message regarding &quot openjpa.Id&quot Hi all, this bug is to report a confusing and misplaced error message. Problem is described below. Feel free to request more info from me. &lt br/&gt  &lt br/&gt When running my project with OpenJPA, I get the following error message: &lt br/&gt  &lt br/&gt 140  INFO   [http-0.0.0.0-8080-Processor23] openjpa.Runtime - Starting OpenJPA 1.0.0 &lt br/&gt 380  INFO   [http-0.0.0.0-8080-Processor23] openjpa.jdbc.JDBC - Using dictionary class &amp quot org.apache.openjpa.jdbc.sql.DB2Dictionary&amp quot . &lt br/&gt 20  WARN   [http-0.0.0.0-8080-Processor25] openjpa.Runtime - The property named &amp quot openjpa.Id&amp quot  was not recognized and will be ignored, although the name closely matches a valid property called &amp quot openjpa.Id&amp quot . &lt br/&gt 100  INFO   [http-0.0.0.0-8080-Processor25] openjpa.Runtime - Starting OpenJPA 1.0.0 &lt br/&gt 300  INFO   [http-0.0.0.0-8080-Processor25] openjpa.jdbc.JDBC - Using dictionary class &amp quot org.apache.openjpa.jdbc.sql.DB2Dictionary&amp quot . &lt br/&gt  &lt br/&gt As you can see, the two property names printed are the same, not different or similar. I retyped all my @Id annotations to make sure there was no special character in one of them coming from copy&amp amp paste. &lt br/&gt Furthermore, I was able to identify that the error message was being printed only when I removed the @Id annotation from one of my classes (all the other classes still have @Id). &lt br/&gt  &lt br/&gt Here is a sample of my class without @Id annotation: &lt br/&gt @Entity &lt br/&gt @Table(name=&amp quot TAX&amp quot , schema=&amp quot JPA_SC&amp quot ) &lt br/&gt public class Tax  { &lt br/&gt   &lt br/&gt  // Class variables   &lt br/&gt  protected double taxamount  &lt br/&gt &amp nbsp  &lt br/&gt  public Tax(){ &lt br/&gt    &lt br/&gt  } &lt br/&gt   &lt br/&gt  public Tax(double taxamount){ &lt br/&gt   this.taxamount = taxamount  &lt br/&gt  } &lt br/&gt //plus getter and setter for taxamount &lt br/&gt  &lt br/&gt } &lt br/&gt  &lt br/&gt Regards, &lt br/&gt Vitor Rodrigues
2
openjpa-lib.src.main.java.org.apache.openjpa.lib.conf.ConfigurationImpl
openjpa-lib.src.main.java.org.apache.openjpa.lib.conf.Configurations

6 OPENJPA-2275
Extending SchemaTool Proposing some access level changes to various attributes and methods in SchemaTool as per [1], in order to improve extendability. &lt br/&gt  &lt br/&gt [1] &lt a href=&quot http://openjpa.208410.n2.nabble.com/Overriding-SchemaTool-td7581315.html&quot &gt http://openjpa.208410.n2.nabble.com/Overriding-SchemaTool-td7581315.html&lt /a&gt
1
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.schema.SchemaTool

7 OPENJPA-2257
Concurreny in org.apache.openjpa.persistence.EntityManagerImpl.getProperties leads to NullPointer and ConcurrentModificationException A call of EntityManager.getProperties() can lead to NullPointer and ConcurrentModificationException. Issue occurs right after start up of the overlying JEE application if multiple EntityManager instance are created at same time. &lt br/&gt  &lt br/&gt Please find the issued stack trace below: &lt br/&gt  &lt br/&gt Caused by: java.lang.NullPointerException &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at java.lang.String.compareTo(String.java:482) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at java.lang.String.compareTo(String.java:31) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at java.util.TreeMap.cmp(TreeMap.java:4514) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at java.util.TreeMap.putImpl(TreeMap.java:4556) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at java.util.TreeMap.put(TreeMap.java:4536) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at java.util.TreeSet.add(TreeSet.java:122) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at &lt br/&gt org.apache.openjpa.lib.conf.ConfigurationImpl.getPropertyKeys(ConfigurationImpl.java:708) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at &lt br/&gt org.apache.openjpa.kernel.BrokerImpl.getSupportedProperties(BrokerImpl.java:729) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at &lt br/&gt org.apache.openjpa.kernel.DelegatingBroker.getSupportedProperties(DelegatingBroker.java:223) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp at &lt br/&gt org.apache.openjpa.persistence.EntityManagerImpl.getProperties(EntityManagerImpl.java:1624) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp ... 33 more
1
openjpa-lib.src.main.java.org.apache.openjpa.lib.conf.ConfigurationImpl

8 OPENJPA-2247
JoinColumn annotation is ignored when mapping a unidirectional owned OneToOne that is in a SecondaryTable The runtime incorrectly ignores @JoinColumn.name when mapping a unidirectional owned OneToOne that is in a SecondaryTable. &lt br/&gt  &lt br/&gt This problem only exists when running with a persistence.xml that is set to 2.0 (version=&amp quot 2.0&amp quot &amp gt ). &lt br/&gt  &lt br/&gt For example: &lt br/&gt  &lt br/&gt @Entity &lt br/&gt @SecondaryTable(name = &amp quot ParentSecondaryTable&amp quot , pkJoinColumns =  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp { @PrimaryKeyJoinColumn(name = &amp quot idParent&amp quot , referencedColumnName = &amp quot idParent&amp quot ) }) &lt br/&gt public class Parent { &lt br/&gt  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp @Id &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp @GeneratedValue &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp int idParent  &lt br/&gt  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp String child_ref  &lt br/&gt  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp @OneToOne &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp @JoinColumn(name = &amp quot CHILD_REF&amp quot , table = &amp quot ParentSecondaryTable&amp quot , referencedColumnName = &amp quot idChild&amp quot ) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp PChild child  &lt br/&gt  &lt br/&gt } &lt br/&gt  &lt br/&gt The column &amp quot CHILD_REF&amp quot  will be ignored and the runtime will look for the fk in non-existent column ParentSecondaryTable.CHILD_IDCHILD.
1
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.meta.MappingRepository

9 OPENJPA-2231
jest  TokenReplacedStream use Reader instead of Inputstream in order to preserve utf-8 characters in replace-function , use Reader instead of Inputstream &lt br/&gt public class TokenReplacedStream { &lt br/&gt ... &lt br/&gt //public void replace(InputStream in, Writer out, String... prs) throws IOException { &lt br/&gt &amp nbsp public void replace(Reader in, Writer out, String... prs) throws IOException { &lt br/&gt  &lt br/&gt  &lt br/&gt using new type: &lt br/&gt InputStream in=servletContext.getResourceAsStream(rsrc)  &lt br/&gt BufferedReader in_br=new BufferedReader(new InputStreamReader(in,&amp quot UTF-8&amp quot ))  &lt br/&gt new TokenReplacedStream().replace(in_br,out_char,tokens)  &lt br/&gt  &lt br/&gt  &lt br/&gt
1
openjpa-jest.src.main.java.org.apache.openjpa.persistence.jest.TokenReplacedStream

10 OPENJPA-2227
OpenJPA doesn&apos t find custom SequenceGenerators I&amp #39 m trying to use a custom SequenceGenerator within an enterprise application using openJPA (providing by WebSphere). &lt br/&gt  &lt br/&gt When defining a custom Sequence a ClassNotFoundException (for the Sequence class) will be thrown when trying to insert data into the database. &lt br/&gt  &lt br/&gt ExampleConfiguration: &lt br/&gt {code} &lt br/&gt @Entity &lt br/&gt @SequenceGenerator(name=&amp quot MySequence&amp quot , sequenceName=&amp quot org.apache.openjpa.generator.UIDGenerator()&amp quot ) &lt br/&gt public class Customer implements Serializable { &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp @Id &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=&amp quot MySequence&amp quot ) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp private long id  &lt br/&gt {code} &lt br/&gt  &lt br/&gt The example will produce the stacktrace attached. &lt br/&gt  &lt br/&gt It seems that the wrong class loader is used to instantiate the custom sequence class. A very similar issue seems to be: &lt a href=&quot https://issues.apache.org/jira/browse/OPENJPA-758&quot  title=&quot OpenJPA doesn&amp #39 t find ValueHandlers with an applicable class loader&quot  class=&quot issue-link&quot  data-issue-key=&quot OPENJPA-758&quot &gt &lt strike&gt OPENJPA-758&lt /strike&gt &lt /a&gt . With JavaSE (JUnit) all is working fine, but after deploying into WAS the Exception will occur. &lt br/&gt  &lt br/&gt I think within the method SequenceMetaData.instantiate(Classloader envLoader) the JavaTypes.classForName() -method with parameter mustExist=false should be used instead of the pure Class.forName() call. But I&amp #39 m not sure about the Metadata-parameter needed for this method call.
1
openjpa-kernel.src.main.java.org.apache.openjpa.meta.SequenceMetaData

11 OPENJPA-2196
Create Sequence Postgres 9.1 Sorry my bad english .. &lt br/&gt  &lt br/&gt when annotated a entity with @SequenceGenerator and with allocationSize = 1 and initialValue = 1, the method DBDictionary.commonCreateAlterSequenceSQL is creating a alter sequence sql invalid for Postgres 9.1. &lt br/&gt Despite the documentation of postgres inform you that the other parameters are optional (&lt a href=&quot http://www.postgresql.org/docs/9.1/static/sql-altersequence.html),&quot &gt http://www.postgresql.org/docs/9.1/static/sql-altersequence.html),&lt /a&gt  an error occurs in executing the sql below. &lt br/&gt  &lt br/&gt Eg: ALTER SEQUENCE schema_experimento.usuario_sq (no other attributes) &lt br/&gt  &lt br/&gt Even the method NativeJDBCSeq.udpateSql being fault tolerant, the connection is marked for rollback and not allowing run the next val of sequence. &lt br/&gt  &lt br/&gt H&amp #xEA ndi Marcos
2
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.kernel.NativeJDBCSeq
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.sql.DBDictionary

12 OPENJPA-2174
Result set mapping was not looked up when retrieving column data from a NamedNativeQuery Invalid index exception was thrown when it tried to retrieve the column data from the result set of a name native query.  &lt br/&gt  &lt br/&gt This is  because the attribute name defined in the entity is different from the actual column alas name defined in the query and  it didn&amp #39 t look up the result set mapping for the correct column name before retrieving the data. &lt br/&gt  &lt br/&gt the fix and test case is attached. &lt br/&gt  &lt br/&gt
1
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.meta.strats.XMLValueHandler

13 OPENJPA-2163
Lifecycle event callback occurs more often than expect A problem was uncovered in a scenario where multiple EntityManager instances created from the same EntityManagerFactory, and each instance is initialized with a new instance of a LifecycleListener instance, i.e. &lt br/&gt  &lt br/&gt final EntityManager em = factory.createEntityManager()  &lt br/&gt final EntityManager em2 = factory.createEntityManager()  &lt br/&gt ... &lt br/&gt MyLifecycleListener l1 = new MyLifecycleListener()  &lt br/&gt MyLifecycleListener l2 = new MyLifecycleListener()  &lt br/&gt ... &lt br/&gt ((OpenJPAEntityManagerSPI)em).addLifecycleListener(l1, null)  &lt br/&gt ((OpenJPAEntityManagerSPI)em2).addLifecycleListener(l2, null)  &lt br/&gt  &lt br/&gt When life cycle event occurs for a specific entity manager, all the listeners created under the emf are being invoked. The expected behavior is only the listener registered in the em from which the life cycle events are related should be called. &lt br/&gt
2
openjpa-kernel.src.main.java.org.apache.openjpa.conf.OpenJPAConfigurationImpl
openjpa-persistence-jdbc.src.test.java.org.apache.openjpa.persistence.validation.TestValidationMode

14 OPENJPA-2151
Improve the performance of StateManagerImpl.initialize While running some performance tests I found that StateManagerImpl.initialize could be improved through caching some additional meta data.  &lt br/&gt  &lt br/&gt I also found another improvement that could be added to the PCState.initialize(...) transition. As far as I can tell, the PCState transition(s) do not have a concept of what state they are coming from and in some instances we are doing work unnecessary work. For example, when finding an Entity with an active transaction, we have all clean bitsets, but when we call PCleanState.initialize(...) the state doesn&amp #39 t know that this is a &amp #39 fresh&amp #39  instance and we don&amp #39 t need to touch the dirty bitset.
21
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.ECleanState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.ECopyState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.EDirtyState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.ENonTransState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.HollowState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PCState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PCleanState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PDeletedState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PDirtyState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PNewFlushedDeletedFlushedState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PNewProvisionalState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PNewState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PNonTransDirtyState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PNonTransNewState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.PNonTransState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.StateManagerImpl
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.TCleanState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.TDirtyState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.TLoadedState
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.TransientState
openjpa-kernel.src.main.java.org.apache.openjpa.meta.ClassMetaData

15 OPENJPA-2149
Criteria.function adds wrong casts to parameters making it unsuable Criteria.function will generate an SQL with only the last parameter casted and to the wrong type. &lt br/&gt   Expression&amp lt String&amp gt  stPointFunc = cb.function( &lt br/&gt     &amp quot db2gse.st_point&amp quot ,  &lt br/&gt     String.class, &lt br/&gt     cb.literal(0.0), &lt br/&gt     cb.literal(0.0), &lt br/&gt     cb.literal(1003))  &lt br/&gt    &lt br/&gt   Expression&amp lt Double&amp gt  distanceFunc = cb.function( &lt br/&gt     &amp quot db2gse.st_distance&amp quot ,  &lt br/&gt     Double.class,  &lt br/&gt     stPointFunc,  &lt br/&gt     usersLocations.get(&amp quot location&amp quot ))  &lt br/&gt    &lt br/&gt   criteriaQuery.select(usersLocations).where(cb.lessThan(distanceFunc, cb.literal(50.0)))  &lt br/&gt  &lt br/&gt Will generate the following SQL: &lt br/&gt (db2gse.st_distance(db2gse.st_point(?, ?, CAST(? AS DOUBLE)), t0.LOCATION) &amp lt  ?) &lt br/&gt  &lt br/&gt Notice the 3rd parameter is an Integer and its being cast as Double. &lt br/&gt The problem is in org.apache.openjpa.jdbc.kernel.exps.DatastoreFunction#appendTo &lt br/&gt  &lt br/&gt Line 54:  args.appendTo(sel, ctx, state, sql, 0)  &lt br/&gt Will append 3 ? to the sql buffer: &amp quot (db2gse.st_distance(db2gse.st_point(?, ?, ?&amp quot  &lt br/&gt  &lt br/&gt Then the loop in line 56-58 &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp for (int i = 1  i &amp lt  vals.length  i++) { &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp sql.addCastForParam(getOperator(), vals[i])  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp nbsp } &lt br/&gt It becomes: &amp quot (db2gse.st_distance(db2gse.st_point(?, ?, CAST(? AS DOUBLE)&amp quot  &lt br/&gt  &lt br/&gt  &lt br/&gt Starts with 1 (second parameter and not the first one), whil sql.addCastForParam only works for the last ? in the sql buffer, meaning the cast for the param at index 1 is added to the last ? and the method will not do anything else. &lt br/&gt  &lt br/&gt This issue leaves Criteria.function useless to me, I tried extending my DBDictionary to remove all the cast as a work around but the function became ambiguous. &lt br/&gt  &lt br/&gt Thanks in advance. &lt br/&gt  &lt br/&gt Found a temporary (working but ugly) workaround: &lt br/&gt   Expression&amp lt String&amp gt  stPointFunc = cb.function( &lt br/&gt     &amp quot db2gse.st_point&amp quot ,  &lt br/&gt     String.class, &lt br/&gt     cb.coalesce(cb.literal(0.0), cb.literal(0.0)), &lt br/&gt     cb.coalesce(cb.literal(1.0), cb.literal(1.0)), &lt br/&gt     cb.coalesce(cb.literal(1003), cb.literal(1003)))  &lt br/&gt  &lt br/&gt coalesce uses raw value instead of parameters and makes it work (the same value twice becuase if I put cb.nullLiteral I get a NullPointerException, might be another bug) &lt br/&gt
3
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.kernel.exps.Args
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.kernel.exps.DatastoreFunction
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.kernel.exps.UnaryOp

16 OPENJPA-2133
OpenJPA doesn&apos t find custom mappings with an applicable class loader JIRA &lt a href=&quot https://issues.apache.org/jira/browse/OPENJPA-758&quot  title=&quot OpenJPA doesn&amp #39 t find ValueHandlers with an applicable class loader&quot  class=&quot issue-link&quot  data-issue-key=&quot OPENJPA-758&quot &gt &lt strike&gt OPENJPA-758&lt /strike&gt &lt /a&gt  addressed a class loader issue where ValueHandlers could not be found by an applicable class loader. The fix was specific to ValueHandlers. However, the same issue occurs for other customer mappings (e.g. ClassStrategy, DiscriminatorStrategy, etc). Basically, mappings handled by MappingRepository. I will attach a patch with my proposed changes. The fix is in the same pattern as was done in the fix for JIRA &lt a href=&quot https://issues.apache.org/jira/browse/OPENJPA-758&quot  title=&quot OpenJPA doesn&amp #39 t find ValueHandlers with an applicable class loader&quot  class=&quot issue-link&quot  data-issue-key=&quot OPENJPA-758&quot &gt &lt strike&gt OPENJPA-758&lt /strike&gt &lt /a&gt , please see this JIRA for more details.
2
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.meta.MappingRepository
openjpa-kernel.src.main.java.org.apache.openjpa.meta.JavaTypes

17 OPENJPA-2107
ManagedCache conflict due adding an entity 2 times in the same query. I have a complex query which creates the following error: &lt br/&gt  &lt br/&gt &amp lt openjpa-2.2.0-tiss-2-rexported nonfatal user error&amp gt  org.apache.openjpa.persistence.ArgumentException: Cannot load object with id &amp quot 26301&amp quot .  Instance &amp quot &lt a href=&apos mailto:at.ac.tuwien.tiss.curriculum.be.entities.DefaultCourse@6e267b76&apos &gt at.ac.tuwien.tiss.curriculum.be.entities.DefaultCourse@6e267b76&lt /a&gt &amp quot  with the same id already exists in the L1 cache.  This can occur when you assign an existing id to a new instance, and before flushing attempt to load the existing instance for that id. &lt br/&gt FailedObject: at.ac.tuwien.tiss.curriculum.be.entities.DefaultCourse-26301 &lt br/&gt  at org.apache.openjpa.kernel.ManagedCache.add(ManagedCache.java:126) &lt br/&gt  at org.apache.openjpa.kernel.BrokerImpl.setStateManager(BrokerImpl.java:4117) &lt br/&gt  at org.apache.openjpa.kernel.StateManagerImpl.initialize(StateManagerImpl.java:391) &lt br/&gt  at org.apache.openjpa.kernel.StateManagerImpl.initialize(StateManagerImpl.java:340) &lt br/&gt  at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.initializeState(JDBCStoreManager.java:378) &lt br/&gt  &lt br/&gt It seems that this entity gets loaded from the db twice in the same query. &lt br/&gt  &lt br/&gt While hitting the problem, the StateManagers have the following _flags: &lt br/&gt  &lt br/&gt orig _flags= 602 = 0010 0101 1010 SAVE LOADED READ_LOCKED OID_ASSIGNED FLUSHED   &lt br/&gt sm   _flags= 16  = 0000 0001 0000 READ_LOCKED &lt br/&gt  &lt br/&gt And it is really only 1 instance which makes this problem. If I set the &amp #39 orig&amp #39  variable to null in the debugger, the test runs fine.
1
openjpa-kernel.src.main.java.org.apache.openjpa.kernel.BrokerImpl

18 OPENJPA-1682
TestSimpleXmlEntity.testId failed with invalid DB2 create table SQL statement TestSimpleXmlEntity.testId starts failing with the following exception against DB2: &lt br/&gt  &lt br/&gt TestSimpleXmlEntity.testId  View test details   (org.apache.openjpa.persistence.xml) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp lt openjpa-2.1.0-SNAPSHOT-r422266:951071 nonfatal general error&amp gt  org.apache.openjpa.persistence.PersistenceException: DB2 SQL Error: SQLCODE=-542, SQLSTATE=42831, SQLERRMC=NICKNAME_XML, DRIVER=3.50.152 {stmnt 65405926 CREATE TABLE NickNames_xml (A_ID_xml INTEGER NOT NULL, nickName_xml VARCHAR(20), CONSTRAINT U_NCKNXML_A_ID_XML UNIQUE (A_ID_xml, nickName_xml))} [code=-542, state=42831] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.meta.MappingTool.record(MappingTool.java:556) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.meta.MappingTool.record(MappingTool.java:456) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp Please wait... Show details &amp #xBB  &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp #xAB  Hide details &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp &amp lt openjpa-2.1.0-SNAPSHOT-r422266:951071 nonfatal general error&amp gt  org.apache.openjpa.persistence.PersistenceException: DB2 SQL Error: SQLCODE=-542, SQLSTATE=42831, SQLERRMC=NICKNAME_XML, DRIVER=3.50.152 {stmnt 65405926 CREATE TABLE NickNames_xml (A_ID_xml INTEGER NOT NULL, nickName_xml VARCHAR(20), CONSTRAINT U_NCKNXML_A_ID_XML UNIQUE (A_ID_xml, nickName_xml))} [code=-542, state=42831] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.meta.MappingTool.record(MappingTool.java:556) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.meta.MappingTool.record(MappingTool.java:456) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory.synchronizeMappings(JDBCBrokerFactory.java:155) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory.synchronizeMappings(JDBCBrokerFactory.java:159) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory.newBrokerImpl(JDBCBrokerFactory.java:117) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:199) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:151) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.persistence.test.SingleEMTestCase.setUp(SingleEMTestCase.java:47) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.persistence.xml.TestSimpleXmlEntity.setUp(TestSimpleXmlEntity.java:28) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at junit.framework.TestCase.runBare(TestCase.java:125) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.persistence.test.AbstractPersistenceTestCase.runBare(AbstractPersistenceTestCase.java:503) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.persistence.test.AbstractPersistenceTestCase.runBare(AbstractPersistenceTestCase.java:479) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at junit.framework.TestResult$1.protect(TestResult.java:106) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at junit.framework.TestResult.runProtected(TestResult.java:124) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at junit.framework.TestResult.run(TestResult.java:109) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at junit.framework.TestCase.run(TestCase.java:118) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.persistence.test.AbstractPersistenceTestCase.run(AbstractPersistenceTestCase.java:179) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at junit.framework.TestSuite.runTest(TestSuite.java:208) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at junit.framework.TestSuite.run(TestSuite.java:203) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at sun.reflect.GeneratedMethodAccessor52.invoke(Unknown Source) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at java.lang.reflect.Method.invoke(Method.java:600) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.maven.surefire.Surefire.run(Surefire.java:177) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at java.lang.reflect.Method.invoke(Method.java:600) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp Caused by: org.apache.openjpa.lib.jdbc.ReportingSQLException: DB2 SQL Error: SQLCODE=-542, SQLSTATE=42831, SQLERRMC=NICKNAME_XML, DRIVER=3.50.152 {stmnt 65405926 CREATE TABLE NickNames_xml (A_ID_xml INTEGER NOT NULL, nickName_xml VARCHAR(20), CONSTRAINT U_NCKNXML_A_ID_XML UNIQUE (A_ID_xml, nickName_xml))} [code=-542, state=42831] &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:257) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:241) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.access$700(LoggingConnectionDecorator.java:70) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingStatement.executeUpdate(LoggingConnectionDecorator.java:951) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.lib.jdbc.DelegatingStatement.executeUpdate(DelegatingStatement.java:136) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.schema.SchemaTool.executeSQL(SchemaTool.java:1200) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.schema.SchemaTool.createTable(SchemaTool.java:956) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.schema.SchemaTool.add(SchemaTool.java:533) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.schema.SchemaTool.add(SchemaTool.java:348) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.schema.SchemaTool.run(SchemaTool.java:325) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp at org.apache.openjpa.jdbc.meta.MappingTool.record(MappingTool.java:504) &lt br/&gt &amp nbsp &amp nbsp &amp nbsp &amp nbsp ... 33 more &lt br/&gt  &lt br/&gt The create table constraint  requires nickName_xml be &amp quot NOT NULL&amp quot  &lt br/&gt  &lt br/&gt Albert Lee
9
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.kernel.TableJDBCSeq
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.meta.MappingInfo
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.schema.Table
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.schema.Unique
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.schema.XMLSchemaParser
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.sql.AbstractDB2Dictionary
openjpa-jdbc.src.main.java.org.apache.openjpa.jdbc.sql.DBDictionary
openjpa-persistence-jdbc.src.main.java.org.apache.openjpa.persistence.jdbc.AnnotationPersistenceMappingParser
openjpa-persistence-jdbc.src.main.java.org.apache.openjpa.persistence.jdbc.XMLPersistenceMappingParser

